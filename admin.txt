<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Адмін-панель</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body { font-family: 'Inter', sans-serif; background-color: #f9fafb; color: #1e293b; line-height: 1.6; }
    .btn { padding: 0.75rem 1.5rem; border-radius: 2rem; font-weight: 600; font-size: 0.9rem; color: white; border: none; cursor: pointer; transition: transform 0.3s ease; box-shadow: 0 3px 10px rgba(0,0,0,0.2); touch-action: manipulation; }
    .btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.3); }
    .btn-back { background: linear-gradient(135deg, #6b7280, #4b5563); display: flex; align-items: center; gap: 0.5rem; padding: 0.5rem 1rem; border-radius: 1.5rem; box-shadow: 0 2px 8px rgba(0,0,0,0.15); }
    .btn-back:hover { background: linear-gradient(135deg, #4b5563, #374151); }
    .btn-primary { background: linear-gradient(135deg, #3b82f6, #2563eb); }
    .btn-primary:hover { background: linear-gradient(135deg, #2563eb, #1d4ed8); }
    .btn-courier { background: linear-gradient(135deg, #f59e0b, #d97706); }
    .btn-courier:hover { background: linear-gradient(135deg, #d97706, #b45309); }
    .btn-delete { background: linear-gradient(135deg, #ef4444, #dc2626); }
    .btn-delete:hover { background: linear-gradient(135deg, #dc2626, #b91c1c); }
    @media (max-width: 768px) { .btn { padding: 0.6rem 1.2rem; font-size: 0.8rem; } .btn-back { padding: 0.4rem 0.8rem; font-size: 0.8rem; } }
    .admin-container { padding: 2rem 1rem; max-width: 90%; margin: 0 auto; }
    .section-title { font-size: 2rem; font-weight: 800; margin-bottom: 1.5rem; background: linear-gradient(to right, #3b82f6, #ec4899); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }
    .admin-section { margin-bottom: 3rem; }
    .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1.5rem; margin-bottom: 2rem; }
    .stat-card { background: linear-gradient(145deg, #ffffff, #f1f5f9); padding: 1.5rem; border-radius: 1rem; box-shadow: 0 6px 15px rgba(0,0,0,0.08); text-align: center; }
    .stat-value { font-size: 2rem; font-weight: 700; color: #1e293b; margin-bottom: 0.5rem; }
    .stat-label { font-size: 1rem; color: #64748b; }
    .admin-grid { display: grid; grid-template-columns: 1fr; gap: 1.5rem; }
    @media (min-width: 768px) { .admin-grid { grid-template-columns: repeat(2, 1fr); } }
    @media (min-width: 1024px) { .admin-grid { grid-template-columns: repeat(3, 1fr); } }
    .admin-card { background: linear-gradient(145deg, #ffffff, #f1f5f9); padding: 1.5rem; border-radius: 1rem; box-shadow: 0 6px 15px rgba(0,0,0,0.08); }
    .card-title { font-size: 1.5rem; font-weight: 700; margin-bottom: 1rem; color: #1e293b; }
    .card-subtitle { font-size: 1.2rem; font-weight: 600; margin-bottom: 0.5rem; color: #1e293b; }
    .card-text { color: #64748b; margin-bottom: 0.75rem; font-size: 0.9rem; }
    .card-actions { display: flex; flex-wrap: wrap; gap: 0.75rem; justify-content: flex-end; }
    .order-list { margin-top: 2rem; }
    .orders { display: flex; flex-direction: column; gap: 1.5rem; }
    .order-item { background: linear-gradient(145deg, #ffffff, #f1f5f9); padding: 1.5rem; border-radius: 1rem; box-shadow: 0 6px 15px rgba(0,0,0,0.08); display: flex; flex-direction: column; gap: 0.75rem; }
    .order-title { font-size: 1.2rem; font-weight: 700; color: #1e293b; }
    .order-details { color: #475569; margin: 0.5rem 0; font-size: 0.9rem; }
    .order-status { color: #64748b; font-weight: 500; font-size: 0.9rem; }
    .modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; padding: 1rem; }
    .modal-content { background: #ffffff; padding: 2rem; border-radius: 1rem; width: 100%; max-width: 90%; box-shadow: 0 10px 20px rgba(0,0,0,0.2); }
    .modal-title { font-size: 1.5rem; font-weight: 700; margin-bottom: 1rem; color: #1e293b; }
    .input-field { width: 100%; padding: 0.75rem; margin-bottom: 1rem; border: 1px solid #d1d5db; border-radius: 0.5rem; font-size: 1rem; }
    .input-field:focus { outline: none; border-color: #3b82f6; box-shadow: 0 0 0 3px rgba(59,130,246,0.2); }
    .modal-actions { display: flex; flex-wrap: wrap; gap: 0.75rem; justify-content: flex-end; }
    @media (max-width: 768px) { .admin-container { padding: 1rem 0.5rem; } .section-title { font-size: 1.5rem; } .stats-grid { gap: 1rem; } .stat-card { padding: 1rem; } .stat-value { font-size: 1.5rem; } .stat-label { font-size: 0.9rem; } .admin-grid { gap: 1rem; } .admin-card { padding: 1rem; } .card-title { font-size: 1.2rem; } .card-subtitle { font-size: 1.1rem; } .card-text { font-size: 0.8rem; } .order-item { padding: 1rem; } .order-title { font-size: 1.1rem; } .order-details, .order-status { font-size: 0.8rem; } .modal-content { padding: 1.5rem; } .modal-title { font-size: 1.2rem; } .input-field { padding: 0.6rem; font-size: 0.9rem; } }
  </style>
</head>
<body>
  <div id="root"></div>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.development.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.development.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.22.9/babel.min.js"></script>
  <script type="text/babel">
    const { useState, useEffect } = React;

    const API_URL = 'http://localhost:3000'; // Змініть на URL вашого хостингу після розгортання

    const AdminPanel = () => {
      const [restaurants, setRestaurants] = useState([]);
      const [couriers, setCouriers] = useState([]);
      const [orders, setOrders] = useState([]);
      const [editRestaurant, setEditRestaurant] = useState(null);
      const [editCourier, setEditCourier] = useState(null);
      const [newRestaurant, setNewRestaurant] = useState({ name: '', city: '' });
      const [newCourier, setNewCourier] = useState({ name: '', status: 'Активний' });

      useEffect(() => {
        const fetchData = async () => {
          const user = JSON.parse(localStorage.getItem('currentUser') || '{}');
          if (!user.id || user.role !== 'admin') {
            window.location.href = 'index.html';
            return;
          }

          const restaurantsResponse = await fetch(`${API_URL}/restaurants`);
          const restaurantsData = await restaurantsResponse.json();
          setRestaurants(restaurantsData);

          const couriersResponse = await fetch(`${API_URL}/couriers`);
          const couriersData = await couriersResponse.json();
          setCouriers(couriersData);

          const ordersResponse = await fetch(`${API_URL}/orders`);
          const ordersData = await ordersResponse.json();
          setOrders(ordersData);
        };
        fetchData();
      }, []);

      const handleLogout = () => {
        localStorage.removeItem('currentUser');
        window.location.href = 'index.html';
      };

      const handleEditRestaurant = (restaurant) => setEditRestaurant(restaurant);
      const handleEditCourier = (courier) => setEditCourier(courier);

      const saveRestaurant = async () => {
        await fetch(`${API_URL}/restaurants/${editRestaurant.id}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name: editRestaurant.name, city: editRestaurant.city }),
        });
        const response = await fetch(`${API_URL}/restaurants`);
        const data = await response.json();
        setRestaurants(data);
        setEditRestaurant(null);
      };

      const saveCourier = async () => {
        await fetch(`${API_URL}/couriers/${editCourier.id}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name: editCourier.name, status: editCourier.status }),
        });
        const response = await fetch(`${API_URL}/couriers`);
        const data = await response.json();
        setCouriers(data);
        setEditCourier(null);
      };

      const deleteRestaurant = async (id) => {
        await fetch(`${API_URL}/restaurants/${id}`, {
          method: 'DELETE',
        });
        const response = await fetch(`${API_URL}/restaurants`);
        const data = await response.json();
        setRestaurants(data);
      };

      const deleteCourier = async (id) => {
        await fetch(`${API_URL}/couriers/${id}`, {
          method: 'DELETE',
        });
        const response = await fetch(`${API_URL}/couriers`);
        const data = await response.json();
        setCouriers(data);
      };

      const addRestaurant = async () => {
        if (newRestaurant.name && newRestaurant.city) {
          await fetch(`${API_URL}/restaurants`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: Date.now(), name: newRestaurant.name, city: newRestaurant.city, menu: [], owner: '' }),
          });
          const response = await fetch(`${API_URL}/restaurants`);
          const data = await response.json();
          setRestaurants(data);
          setNewRestaurant({ name: '', city: '' });
        } else {
          alert('Заповніть усі поля');
        }
      };

      const addCourier = async () => {
        if (newCourier.name) {
          await fetch(`${API_URL}/couriers`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: Date.now(), name: newCourier.name, status: newCourier.status }),
          });
          const response = await fetch(`${API_URL}/couriers`);
          const data = await response.json();
          setCouriers(data);
          setNewCourier({ name: '', status: 'Активний' });
        } else {
          alert('Введіть ім’я кур’єра');
        }
      };

      return (
        <div className="admin-container">
          <button onClick={handleLogout} className="btn btn-back">← Вийти</button>
          <h1 className="section-title">Адмін-панель</h1>
          <div className="admin-section">
            <h2 className="card-title">Статистика</h2>
            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-value">{orders.length}</div>
                <div className="stat-label">Замовлення</div>
              </div>
              <div className="stat-card">
                <div className="stat-value">{couriers.filter(c => c.status === 'Активний').length}</div>
                <div className="stat-label">Активні кур’єри</div>
              </div>
              <div className="stat-card">
                <div className="stat-value">{restaurants.length}</div>
                <div className="stat-label">Ресторани</div>
              </div>
            </div>
          </div>
          <div className="admin-section">
            <h2 className="card-title">Ресторани</h2>
            <div className="admin-grid">
              {restaurants.map(restaurant => (
                <div key={restaurant.id} className="admin-card">
                  <h3 className="card-subtitle">{restaurant.name}</h3>
                  <p className="card-text">Місто: {restaurant.city}</p>
                  <div className="card-actions">
                    <button onClick={() => handleEditRestaurant(restaurant)} className="btn btn-primary">Редагувати</button>
                    <button onClick={() => deleteRestaurant(restaurant.id)} className="btn btn-delete">Видалити</button>
                  </div>
                </div>
              ))}
              <div className="admin-card">
                <h3 className="card-subtitle">Додати ресторан</h3>
                <input type="text" placeholder="Назва ресторану" value={newRestaurant.name} onChange={(e) => setNewRestaurant({ ...newRestaurant, name: e.target.value })} className="input-field" />
                <input type="text" placeholder="Місто" value={newRestaurant.city} onChange={(e) => setNewRestaurant({ ...newRestaurant, city: e.target.value })} className="input-field" />
                <button onClick={addRestaurant} className="btn btn-primary">Додати</button>
              </div>
            </div>
          </div>
          <div className="admin-section">
            <h2 className="card-title">Кур’єри</h2>
            <div className="admin-grid">
              {couriers.map(courier => (
                <div key={courier.id} className="admin-card">
                  <h3 className="card-subtitle">{courier.name}</h3>
                  <p className="card-text">Статус: {courier.status}</p>
                  <div className="card-actions">
                    <button onClick={() => handleEditCourier(courier)} className="btn btn-courier">Редагувати</button>
                    <button onClick={() => deleteCourier(courier.id)} className="btn btn-delete">Видалити</button>
                  </div>
                </div>
              ))}
              <div className="admin-card">
                <h3 className="card-subtitle">Додати кур’єра</h3>
                <input type="text" placeholder="Ім’я кур’єра" value={newCourier.name} onChange={(e) => setNewCourier({ ...newCourier, name: e.target.value })} className="input-field" />
                <select value={newCourier.status} onChange={(e) => setNewCourier({ ...newCourier, status: e.target.value })} className="input-field">
                  <option value="Активний">Активний</option>
                  <option value="Офлайн">Офлайн</option>
                </select>
                <button onClick={addCourier} className="btn btn-courier">Додати</button>
              </div>
            </div>
          </div>
          <div className="admin-section">
            <h2 className="card-title">Останні замовлення</h2>
            <div className="order-list">
              {orders.length === 0 ? (
                <p>Немає замовлень</p>
              ) : (
                <ul className="orders">
                  {orders.map(order => (
                    <li key={order.id} className="order-item">
                      <h3 className="order-title">{order.restaurant}</h3>
                      <p className="order-details">Страва: {order.item}</p>
                      <p className="order-status">Статус: {order.status}</p>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
          {editRestaurant && (
            <div className="modal">
              <div className="modal-content">
                <h3 className="modal-title">Редагувати ресторан</h3>
                <input type="text" placeholder="Назва ресторану" value={editRestaurant.name} onChange={(e) => setEditRestaurant({ ...editRestaurant, name: e.target.value })} className="input-field" />
                <input type="text" placeholder="Місто" value={editRestaurant.city} onChange={(e) => setEditRestaurant({ ...editRestaurant, city: e.target.value })} className="input-field" />
                <div className="modal-actions">
                  <button onClick={() => setEditRestaurant(null)} className="btn btn-back">Скасувати</button>
                  <button onClick={saveRestaurant} className="btn btn-primary">Зберегти</button>
                </div>
              </div>
            </div>
          )}
          {editCourier && (
            <div className="modal">
              <div className="modal-content">
                <h3 className="modal-title">Редагувати кур’єра</h3>
                <input type="text" placeholder="Ім’я кур’єра" value={editCourier.name} onChange={(e) => setEditCourier({ ...editCourier, name: e.target.value })} className="input-field" />
                <select value={editCourier.status} onChange={(e) => setEditCourier({ ...editCourier, status: e.target.value })} className="input-field">
                  <option value="Активний">Активний</option>
                  <option value="Офлайн">Офлайн</option>
                </select>
                <div className="modal-actions">
                  <button onClick={() => setEditCourier(null)} className="btn btn-back">Скасувати</button>
                  <button onClick={saveCourier} className="btn btn-courier">Зберегти</button>
                </div>
              </div>
            </div>
          )}
        </div>
      );
    };

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<AdminPanel />);
  </script>
</body>
</html>